// <auto-generated />
using System;
using Assignment2.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assignment2.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Province")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReservationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0a2436f1-7fba-4e91-8a93-c6ac5668efba",
                            AccessFailedCount = 0,
                            Address = "1234 Elm St",
                            City = "Victoria",
                            ConcurrencyStamp = "cac6a1a4-57bd-4e3c-9c8c-a3f8cb726609",
                            Email = "aa@aa.aa",
                            EmailConfirmed = true,
                            FirstName = "Adam",
                            LastName = "Atkins",
                            LockoutEnabled = false,
                            NormalizedEmail = "AA@AA.AA",
                            NormalizedUserName = "AA@AA.AA",
                            PasswordHash = "AQAAAAIAAYagAAAAEHcZaxPwwoPgCrgRkIWBGxMHrVDt5My9dgTdpw46CtDL/d7ne6VCwNVB7VBRyBVRZg==",
                            PhoneNumber = "250-123-4567",
                            PhoneNumberConfirmed = false,
                            PostalCode = "V8V3A4",
                            Province = "BC",
                            ReservationId = "",
                            SecurityStamp = "90fdafbe-e5ad-41d6-9a89-e6504702d6f5",
                            TwoFactorEnabled = false,
                            UserName = "aa@aa.aa"
                        },
                        new
                        {
                            Id = "8cc58370-895b-4da9-8ab5-dc68468c0746",
                            AccessFailedCount = 0,
                            Address = "5678 Oak St",
                            City = "Victoria",
                            ConcurrencyStamp = "bd669c72-25dd-4af2-86e5-238cca8f2398",
                            Email = "mm@mm.mm",
                            EmailConfirmed = true,
                            FirstName = "Mike",
                            LastName = "Moore",
                            LockoutEnabled = false,
                            NormalizedEmail = "MM@MM.MM",
                            NormalizedUserName = "MM@MM.MM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA9RKim7BibOl+dqUKeTCuNviAChzA1jX1qiHyysJ3eT26bVmfRgTpaswxAq2um4WQ==",
                            PhoneNumber = "250-123-4567",
                            PhoneNumberConfirmed = false,
                            PostalCode = "V8V3A4",
                            Province = "BC",
                            ReservationId = "",
                            SecurityStamp = "69f8f561-c097-4269-a2e5-7be668a25fe4",
                            TwoFactorEnabled = false,
                            UserName = "mm@mm.mm"
                        });
                });

            modelBuilder.Entity("Assignment2.Models.Book", b =>
                {
                    b.Property<string>("CodeNumber")
                        .HasColumnType("TEXT")
                        .HasColumnName("CodeNumber");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("YearPublished")
                        .HasColumnType("INTEGER");

                    b.HasKey("CodeNumber");

                    b.ToTable("Book");

                    b.HasData(
                        new
                        {
                            CodeNumber = "1",
                            Author = "Andrew Chevallier",
                            Quantity = 0,
                            Title = "Encyclopedia of Herbal Medicine: 550 Herbs and Remedies for Common Ailments",
                            YearPublished = 2016
                        },
                        new
                        {
                            CodeNumber = "2",
                            Author = "Michael T. Murray M.D. and Joseph Pizzorno",
                            Quantity = 2,
                            Title = "The Encyclopedia of Natural Medicine Third Edition",
                            YearPublished = 2012
                        },
                        new
                        {
                            CodeNumber = "3",
                            Author = "Thomas Easley and Steven Horne",
                            Quantity = 1,
                            Title = "The Modern Herbal Dispensatory: A Medicine-Making Guide",
                            YearPublished = 2016
                        },
                        new
                        {
                            CodeNumber = "4",
                            Author = "Cat Ellis",
                            Quantity = 2,
                            Title = "Prepper's Natural Medicine: Life-Saving Herbs, Essential Oils and Natural Remedies for When There is No Doctor",
                            YearPublished = 2015
                        },
                        new
                        {
                            CodeNumber = "5",
                            Author = "Rosemary Gladstar",
                            Quantity = 1,
                            Title = "Rosemary Gladstar's Medicinal Herbs: A Beginner's Guide: 33 Healing Herbs to Know, Grow, and Use",
                            YearPublished = 2012
                        },
                        new
                        {
                            CodeNumber = "6",
                            Author = "Stephen King",
                            Quantity = 3,
                            Title = "The Shining",
                            YearPublished = 1977
                        },
                        new
                        {
                            CodeNumber = "7",
                            Author = "J.R.R. Tolkien",
                            Quantity = 5,
                            Title = "The Lord of the Rings",
                            YearPublished = 1954
                        },
                        new
                        {
                            CodeNumber = "8",
                            Author = "Jane Austen",
                            Quantity = 2,
                            Title = "Pride and Prejudice",
                            YearPublished = 1813
                        },
                        new
                        {
                            CodeNumber = "9",
                            Author = "George Orwell",
                            Quantity = 4,
                            Title = "1984",
                            YearPublished = 1949
                        },
                        new
                        {
                            CodeNumber = "10",
                            Author = "Harper Lee",
                            Quantity = 3,
                            Title = "To Kill a Mockingbird",
                            YearPublished = 1960
                        },
                        new
                        {
                            CodeNumber = "11",
                            Author = "F. Scott Fitzgerald",
                            Quantity = 2,
                            Title = "The Great Gatsby",
                            YearPublished = 1925
                        },
                        new
                        {
                            CodeNumber = "12",
                            Author = "Mark Twain",
                            Quantity = 3,
                            Title = "Adventures of Huckleberry Finn",
                            YearPublished = 1884
                        },
                        new
                        {
                            CodeNumber = "13",
                            Author = "Emily Bronte",
                            Quantity = 1,
                            Title = "Wuthering Heights",
                            YearPublished = 1847
                        },
                        new
                        {
                            CodeNumber = "14",
                            Author = "Leo Tolstoy",
                            Quantity = 5,
                            Title = "War and Peace",
                            YearPublished = 1869
                        },
                        new
                        {
                            CodeNumber = "15",
                            Author = "Charles Dickens",
                            Quantity = 2,
                            Title = "Great Expectations",
                            YearPublished = 1861
                        });
                });

            modelBuilder.Entity("Assignment2.Models.Reservation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AdminComment")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookCodeNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EstimatedDeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Fees")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReserverId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Reservation");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AdminComment = "",
                            BookCodeNumber = "1",
                            EstimatedDeliveryDate = new DateTime(2024, 4, 2, 12, 58, 26, 301, DateTimeKind.Local).AddTicks(408),
                            Fees = 0m,
                            ReservationDate = new DateTime(2024, 4, 1, 12, 58, 26, 301, DateTimeKind.Local).AddTicks(190),
                            ReserverId = "0a2436f1-7fba-4e91-8a93-c6ac5668efba",
                            ReturnDate = new DateTime(2024, 5, 1, 12, 58, 26, 301, DateTimeKind.Local).AddTicks(415)
                        },
                        new
                        {
                            Id = "2",
                            AdminComment = "",
                            BookCodeNumber = "2",
                            EstimatedDeliveryDate = new DateTime(2024, 2, 2, 12, 58, 26, 301, DateTimeKind.Local).AddTicks(430),
                            Fees = 0m,
                            ReservationDate = new DateTime(2024, 2, 1, 12, 58, 26, 301, DateTimeKind.Local).AddTicks(428),
                            ReserverId = "8cc58370-895b-4da9-8ab5-dc68468c0746",
                            ReturnDate = new DateTime(2024, 3, 1, 12, 58, 26, 301, DateTimeKind.Local).AddTicks(725)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0e8a0abb-01b7-4d21-bd52-728474b84bf8",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3c9b7463-dc13-41f3-a5fc-be5eaf7914e1",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "0a2436f1-7fba-4e91-8a93-c6ac5668efba",
                            RoleId = "0e8a0abb-01b7-4d21-bd52-728474b84bf8"
                        },
                        new
                        {
                            UserId = "8cc58370-895b-4da9-8ab5-dc68468c0746",
                            RoleId = "3c9b7463-dc13-41f3-a5fc-be5eaf7914e1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
