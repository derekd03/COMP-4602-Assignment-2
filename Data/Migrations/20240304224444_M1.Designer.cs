// <auto-generated />
using System;
using Assignment1.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assignment1.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240304224444_M1")]
    partial class M1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Province")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReservationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "65ad0c8b-0a99-4cdb-b858-412eb9c431a1",
                            AccessFailedCount = 0,
                            Address = "1234 Elm St",
                            City = "Victoria",
                            ConcurrencyStamp = "017d905f-593a-4da3-a776-e76c9128fd58",
                            Email = "aa@aa.aa",
                            EmailConfirmed = true,
                            FirstName = "Adam",
                            LastName = "Atkins",
                            LockoutEnabled = false,
                            NormalizedEmail = "AA@AA.AA",
                            NormalizedUserName = "AA@AA.AA",
                            PasswordHash = "AQAAAAIAAYagAAAAEIPBO0UIwJ8VmcaFC+bZn5WiaIN1C8SEe8EcT5gR0PQuefIvP4KAL5A57BTQLBguew==",
                            PhoneNumber = "250-123-4567",
                            PhoneNumberConfirmed = false,
                            PostalCode = "V8V3A4",
                            Province = "BC",
                            ReservationId = "",
                            SecurityStamp = "eda98c65-faf8-462d-a5c1-859f17e4be51",
                            TwoFactorEnabled = false,
                            UserName = "aa@aa.aa"
                        },
                        new
                        {
                            Id = "d923f860-146a-4273-83ff-72a772d01c62",
                            AccessFailedCount = 0,
                            Address = "5678 Oak St",
                            City = "Victoria",
                            ConcurrencyStamp = "607c4c2c-d356-4f6f-a2c0-5564746a7ee1",
                            Email = "mm@mm.mm",
                            EmailConfirmed = true,
                            FirstName = "Mike",
                            LastName = "Moore",
                            LockoutEnabled = false,
                            NormalizedEmail = "MM@MM.MM",
                            NormalizedUserName = "MM@MM.MM",
                            PasswordHash = "AQAAAAIAAYagAAAAELdP6dijOiS2teXlN3q1Lhl+b4ez/m4ucZ2pKyCHKLDVI4hGFH1iDKSQ0EAmJNxXDw==",
                            PhoneNumber = "250-123-4567",
                            PhoneNumberConfirmed = false,
                            PostalCode = "V8V3A4",
                            Province = "BC",
                            ReservationId = "",
                            SecurityStamp = "a75096e6-c72d-4a5d-b753-8b77dba6ef14",
                            TwoFactorEnabled = false,
                            UserName = "mm@mm.mm"
                        });
                });

            modelBuilder.Entity("Assignment1.Models.Book", b =>
                {
                    b.Property<string>("CodeNumber")
                        .HasColumnType("TEXT")
                        .HasColumnName("CodeNumber");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("YearPublished")
                        .HasColumnType("INTEGER");

                    b.HasKey("CodeNumber");

                    b.ToTable("Book");

                    b.HasData(
                        new
                        {
                            CodeNumber = "1",
                            Author = "Andrew Chevallier",
                            Quantity = 0,
                            Title = "Encyclopedia of Herbal Medicine: 550 Herbs and Remedies for Common Ailments",
                            YearPublished = 2016
                        },
                        new
                        {
                            CodeNumber = "2",
                            Author = "Michael T. Murray M.D. and Joseph Pizzorno",
                            Quantity = 2,
                            Title = "The Encyclopedia of Natural Medicine Third Edition",
                            YearPublished = 2012
                        },
                        new
                        {
                            CodeNumber = "3",
                            Author = "Thomas Easley and Steven Horne",
                            Quantity = 1,
                            Title = "The Modern Herbal Dispensatory: A Medicine-Making Guide",
                            YearPublished = 2016
                        },
                        new
                        {
                            CodeNumber = "4",
                            Author = "Cat Ellis",
                            Quantity = 2,
                            Title = "Prepper's Natural Medicine: Life-Saving Herbs, Essential Oils and Natural Remedies for When There is No Doctor",
                            YearPublished = 2015
                        },
                        new
                        {
                            CodeNumber = "5",
                            Author = "Rosemary Gladstar",
                            Quantity = 1,
                            Title = "Rosemary Gladstar's Medicinal Herbs: A Beginner's Guide: 33 Healing Herbs to Know, Grow, and Use",
                            YearPublished = 2012
                        });
                });

            modelBuilder.Entity("Assignment1.Models.Reservation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AdminComment")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookCodeNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EstimatedDeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Fees")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReserverId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Reservation");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AdminComment = "",
                            BookCodeNumber = "1",
                            EstimatedDeliveryDate = new DateTime(2024, 3, 5, 14, 44, 43, 289, DateTimeKind.Local).AddTicks(8123),
                            Fees = 0m,
                            ReservationDate = new DateTime(2024, 3, 4, 14, 44, 43, 289, DateTimeKind.Local).AddTicks(8079),
                            ReserverId = "65ad0c8b-0a99-4cdb-b858-412eb9c431a1",
                            ReturnDate = new DateTime(2024, 4, 4, 14, 44, 43, 289, DateTimeKind.Local).AddTicks(8126)
                        },
                        new
                        {
                            Id = "2",
                            AdminComment = "",
                            BookCodeNumber = "2",
                            EstimatedDeliveryDate = new DateTime(2024, 1, 5, 14, 44, 43, 289, DateTimeKind.Local).AddTicks(8136),
                            Fees = 0m,
                            ReservationDate = new DateTime(2024, 1, 4, 14, 44, 43, 289, DateTimeKind.Local).AddTicks(8135),
                            ReserverId = "d923f860-146a-4273-83ff-72a772d01c62",
                            ReturnDate = new DateTime(2024, 2, 4, 14, 44, 43, 289, DateTimeKind.Local).AddTicks(8138)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3dd5116f-9220-4a27-aac7-07de6aa9aada",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "04590baf-9eb4-4863-8e20-b3222d28bb77",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "65ad0c8b-0a99-4cdb-b858-412eb9c431a1",
                            RoleId = "3dd5116f-9220-4a27-aac7-07de6aa9aada"
                        },
                        new
                        {
                            UserId = "d923f860-146a-4273-83ff-72a772d01c62",
                            RoleId = "04590baf-9eb4-4863-8e20-b3222d28bb77"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
